function generateMyntraDatasetFull() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const NUM_ROWS = 52000;
  const CLEAN_RATIO = 0.9; // 90% clean data

  // ===== Helper Functions =====
  function randomDate(start, end) {
    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));
  }
  function randomInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  }
  function randomFloat(min, max, decimals = 2) {
    return parseFloat((Math.random() * (max - min) + min).toFixed(decimals));
  }
  function randomChoice(arr) {
    return arr[Math.floor(Math.random() * arr.length)];
  }
  function padId(num, prefix) {
    return prefix + num.toString().padStart(3, '0');
  }

  // ===== Customers =====
  const customerSheet = ss.getSheetByName('customers') || ss.insertSheet('customers');
  customerSheet.clearContents();
  const firstNames = ['John','Jane','Alice','Bob','Carol','David','Eva','Frank','Grace','Harry'];
  const lastNames = ['Smith','Johnson','Brown','Williams','Jones','Miller','Davis','Wilson','Taylor','Anderson'];
  const cities = ['New York','Los Angeles','Chicago','Houston','Phoenix','Philadelphia','Dallas','Austin','Miami','Seattle'];
  const customerHeaders = ['customer_id','first_name','last_name','email','city','signup_date','age','customer_satisfaction_score','loyalty_points'];

  const customerData = [customerHeaders];
  const signupDates = [];

  for (let i = 1; i <= NUM_ROWS; i++) {
    const isClean = Math.random() < CLEAN_RATIO;
    const signupDate = isClean ? randomDate(new Date(2015,0,1), new Date()) : null;
    signupDates.push(signupDate);

    // realistic email
    let email = null;
    if (isClean) {
      const fn = randomChoice(firstNames).toLowerCase();
      const ln = randomChoice(lastNames).toLowerCase();
      email = `${fn}${ln}${i}@gmail.com`;
    } else {
      email = Math.random() < 0.5 ? null : 'invalid_email@@';
    }

    customerData.push([
      padId(i,'CUST'),
      isClean ? randomChoice(firstNames) : null,
      isClean ? randomChoice(lastNames) : null,
      email,
      isClean ? randomChoice(cities) : null,
      signupDate,
      isClean ? randomInt(18,70) : randomInt(100,999),
      isClean ? randomInt(1,10) : null,
      isClean ? randomInt(0,5000) : null
    ]);
  }
  customerSheet.getRange(1,1,customerData.length,customerData[0].length).setValues(customerData);

  // ===== Products =====
  const productSheet = ss.getSheetByName('products') || ss.insertSheet('products');
  productSheet.clearContents();
  const categories = ['T-Shirts','Jeans','Shirts','Dresses','Footwear','Bags','Watches','Accessories','Jackets','Sunglasses'];
  const brands = ['Nike','Adidas','Puma','Levis','H&M','Zara','Forever21','Wildcraft','Reebok','UnitedColors'];
  const productHeaders = ['product_id','name','category','price','stock','rating','discount_percent','return_rate','brand'];

  const productData = [productHeaders];
  for (let i = 1; i <= NUM_ROWS; i++) {
    const isClean = Math.random() < CLEAN_RATIO;
    const productName = `${randomChoice(['Classic','Premium','Stylish','Casual','Sporty','Elegant','Trendy','Comfort'])} ${randomChoice(['T-Shirt','Jeans','Shirt','Dress','Sneakers','Bag','Watch','Sunglasses','Jacket','Accessory'])} ${i%100}`;
    productData.push([
      padId(i,'PROD'),
      isClean ? productName : '***',
      isClean ? randomChoice(categories) : null,
      isClean ? randomFloat(299, 4999) : randomFloat(10000,99999),
      isClean ? randomInt(0,500) : null,
      isClean ? randomFloat(1,5,1) : null,
      isClean ? randomFloat(0,50,0) : null,
      isClean ? randomFloat(0,10,1) : null,
      isClean ? randomChoice(brands) : null
    ]);
  }
  productSheet.getRange(1,1,productData.length,productData[0].length).setValues(productData);

  // ===== Orders =====
  const orderSheet = ss.getSheetByName('orders') || ss.insertSheet('orders');
  orderSheet.clearContents();
  const paymentTypes = ['Credit Card','Debit Card','UPI','Net Banking','Cash'];
  const orderStatus = ['Delivered','Pending','Cancelled'];
  const orderHeaders = ['order_id','customer_id','product_id','order_date','total_amount','payment_type','order_status','repeat_customer','cancellation_flag'];

  const orderData = [orderHeaders];
  const orderDates = [];

  for (let i = 1; i <= NUM_ROWS; i++) {
    const isClean = Math.random() < CLEAN_RATIO;
    const customerIndex = randomInt(0, NUM_ROWS - 1);
    const productIndex = randomInt(0, NUM_ROWS - 1);
    const signupDate = signupDates[customerIndex];
    const orderDate = isClean && signupDate ? randomDate(signupDate, new Date()) : null;
    orderDates.push(orderDate);

    orderData.push([
      padId(i,'ORD'),
      isClean ? padId(customerIndex+1,'CUST') : null,
      isClean ? padId(productIndex+1,'PROD') : null,
      orderDate,
      isClean ? randomFloat(299,4999) : randomFloat(10000,99999),
      isClean ? randomChoice(paymentTypes) : null,
      isClean ? randomChoice(orderStatus) : '***',
      isClean ? (Math.random()<0.3?1:0) : null,
      isClean ? (Math.random()<0.1?1:0) : null
    ]);
  }
  orderSheet.getRange(1,1,orderData.length,orderData[0].length).setValues(orderData);

  // ===== Payments =====
  const paymentSheet = ss.getSheetByName('payments') || ss.insertSheet('payments');
  paymentSheet.clearContents();
  const paymentStatus = ['Success','Failed','Pending'];
  const paymentHeaders = ['payment_id','order_id','paymnt_date','payment_type','payment_status','refund_flag'];
  const paymentData = [paymentHeaders];
  const paymentDates = [];

  for (let i = 1; i <= NUM_ROWS; i++) {
    const isClean = Math.random() < CLEAN_RATIO;
    const orderDate = orderDates[i-1];
    const paymentDate = isClean && orderDate ? randomDate(orderDate,new Date()) : null;
    paymentDates.push(paymentDate);

    paymentData.push([
      padId(i,'PAY'),
      isClean ? padId(i,'ORD') : null,
      paymentDate,
      isClean ? randomChoice(paymentTypes) : '***',
      isClean ? randomChoice(paymentStatus) : null,
      isClean ? (Math.random()<0.05?1:0) : null
    ]);
  }
  paymentSheet.getRange(1,1,paymentData.length,paymentData[0].length).setValues(paymentData);

  // ===== Delivery =====
  const deliverySheet = ss.getSheetByName('delivery') || ss.insertSheet('delivery');
  deliverySheet.clearContents();
  const deliveryPartners = ['DHL','FedEx','BlueDart','Delhivery'];
  const deliveryStatus = ['Delivered','In Transit','Delayed','Returned'];
  const feedback = ['Good','Average','Poor','Excellent'];
  const deliveryHeaders = ['delivery_id','order_id','deliver_date','delivery_partner','delivery_status','customer_feedback'];

  const deliveryData = [deliveryHeaders];

  for (let i = 1; i <= NUM_ROWS; i++) {
    const isClean = Math.random() < CLEAN_RATIO;
    const paymentDate = paymentDates[i-1];
    const deliveryDate = isClean && paymentDate ? randomDate(paymentDate,new Date()) : null;

    deliveryData.push([
      padId(i,'DEL'),
      isClean ? padId(i,'ORD') : null,
      deliveryDate,
      isClean ? randomChoice(deliveryPartners) : null,
      isClean ? randomChoice(deliveryStatus) : '***',
      isClean ? randomChoice(feedback) : null
    ]);
  }
  deliverySheet.getRange(1,1,deliveryData.length,deliveryData[0].length).setValues(deliveryData);

  SpreadsheetApp.getUi().alert('Myntra-style dataset generated with PK/FK consistency, realistic emails, chronological constraints, and ~10% bad data!');
}
